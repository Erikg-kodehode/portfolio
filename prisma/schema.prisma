generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Admin {
  id                  String         @id @default(cuid())
  username            String         @unique
  passwordHash        String
  role                String         @default("admin")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  lastLoginAt         DateTime?
  email               String         @unique
  resetToken          String?
  resetTokenExpiresAt DateTime?
  emailVerified       DateTime?
  sessions            AdminSession[]
  reviewedCVs         CVRequest[]
}

model AdminSession {
  id        String   @id @default(cuid())
  adminId   String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([token])
}

model CVRequest {
  id              String        @id @default(uuid())
  requestId       String        @unique @default(cuid())
  name            String
  email           String
  company         String?
  purpose         String
  ipAddress       String
  userAgent       String
  status          RequestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  reviewedAt      DateTime?
  accessToken     String?       @unique
  accessExpiresAt DateTime?
  accessCount     Int           @default(0)
  reviewedById    String?
  isEnglish       Boolean       @default(false)
  reviewedBy      Admin?        @relation(fields: [reviewedById], references: [id])

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model RateLimit {
  id        String   @id @default(uuid())
  key       String   @unique
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
}

model SystemSettings {
  id                 Int       @id @default(1)
  emailTemplates     Json?     @default("{}")
  adminSettings      Json?     @default("{}")
  maintenanceMode    Boolean   @default(false)
  maintenanceMessage String?
  lastBackup         DateTime?
  backupSettings     Json?     @default("{}")
  interfaceSettings  Json?     @default("{}")
  updatedAt          DateTime  @updatedAt
}

model EmailLog {
  id          String    @id @default(cuid())
  type        String
  to          String
  subject     String
  status      String
  attempts    Int       @default(0)
  error       String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  sentAt      DateTime?
  lastAttempt DateTime?
}

model SystemLog {
  id         String    @id @default(uuid())
  level      String
  message    String
  details    String?
  source     String
  createdAt  DateTime  @default(now())
  resolvedAt DateTime?

  @@index([level])
  @@index([source])
  @@index([createdAt])
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  EXPIRED
}
