// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for CV request status
enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  EXPIRED
}

// Admin authentication
model Admin {
  id           String         @id @default(cuid())
  username     String         @unique
  passwordHash String
  role         String         @default("admin") // For future role types like "super_admin", "moderator", etc.
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  lastLoginAt  DateTime?
  reviewedCVs  CVRequest[] // Link to requests this admin has reviewed
  sessions     AdminSession[]
}

model AdminSession {
  id        String   @id @default(cuid())
  adminId   String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([token])
}

// Main CV request model
model CVRequest {
  id              String        @id @default(uuid())
  requestId       String        @unique @default(cuid()) // Public ID for reference
  name            String
  email           String
  company         String?
  purpose         String
  ipAddress       String
  userAgent       String
  status          RequestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  reviewedAt      DateTime?
  accessToken     String?       @unique
  accessExpiresAt DateTime?
  accessCount     Int           @default(0)
  reviewedBy      Admin?        @relation(fields: [reviewedById], references: [id])
  reviewedById    String?

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

// Rate limiting tracking
model RateLimit {
  id        String   @id @default(uuid())
  key       String   @unique // IP address or email
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
}
